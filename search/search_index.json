{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"spirograph \u00b6 A tool to help building ML pipeline easier for non technical users. Documentation: https://mcgill-cpslab.github.io/spiral GitHub: https://github.com/mcgill-cpslab/spiral PyPI: https://pypi.org/project/spirograph/ Free software: Apache-2.0 Architecture and road map \u00b6 The following image shows the overall architecture design of spirograph: And here will be the spirograph application design. Some names are out of dated, need further modification. Features \u00b6 TODO Credits \u00b6 This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Home"},{"location":"#spirograph","text":"A tool to help building ML pipeline easier for non technical users. Documentation: https://mcgill-cpslab.github.io/spiral GitHub: https://github.com/mcgill-cpslab/spiral PyPI: https://pypi.org/project/spirograph/ Free software: Apache-2.0","title":"spirograph"},{"location":"#architecture-and-road-map","text":"The following image shows the overall architecture design of spirograph: And here will be the spirograph application design. Some names are out of dated, need further modification.","title":"Architecture and road map"},{"location":"#features","text":"TODO","title":"Features"},{"location":"#credits","text":"This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"spiro.core.config module \u00b6 helper function to set runtime backend. This module contains the function to define the runtime context which include backend. Examples: >>> from spiro.core.config import set_backend >>> set_backend ( 'tensorflow' ) >>> import dgl set_backend ( backend ) \u00b6 Setup backend to the input one. Returns: Type Description the name of predefined backend Source code in core/config.py def set_backend ( backend ): \"\"\"Setup backend to the input one. Returns: the name of predefined backend Raises: if no valid backend setting is found in either environment variable or config file, stop the current run and print error message. \"\"\" backend_name = backend if backend_name not in supported_backends (): logger . warning ( _BACKEND_NOT_FOUND ) backend_name = _PYTORCH logger . debug ( \"Using Backend: %s \" % ( backend_name )) os . environ [ _DGL_BACKEND ] = backend_name global _BACKEND _BACKEND = backend_name","title":"spiro.core.config"},{"location":"api/#spirocoreconfig-module","text":"helper function to set runtime backend. This module contains the function to define the runtime context which include backend. Examples: >>> from spiro.core.config import set_backend >>> set_backend ( 'tensorflow' ) >>> import dgl","title":"spiro.core.config module"},{"location":"api/#spiro.core.config.set_backend","text":"Setup backend to the input one. Returns: Type Description the name of predefined backend Source code in core/config.py def set_backend ( backend ): \"\"\"Setup backend to the input one. Returns: the name of predefined backend Raises: if no valid backend setting is found in either environment variable or config file, stop the current run and print error message. \"\"\" backend_name = backend if backend_name not in supported_backends (): logger . warning ( _BACKEND_NOT_FOUND ) backend_name = _PYTORCH logger . debug ( \"Using Backend: %s \" % ( backend_name )) os . environ [ _DGL_BACKEND ] = backend_name global _BACKEND _BACKEND = backend_name","title":"set_backend()"},{"location":"changelog/","text":"Changelog \u00b6 [Unreleased] \u00b6 Added \u00b6 Fixed \u00b6 [0.1.0] - 2022-07-09 \u00b6 Added \u00b6 some classic DTDG learning models code to reproduce result in paper \"Introducing Node Memory into Discrete Time Dynamic Graph Learning\"","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"[Unreleased]"},{"location":"changelog/#added","text":"","title":"Added"},{"location":"changelog/#fixed","text":"","title":"Fixed"},{"location":"changelog/#010---2022-07-09","text":"","title":"[0.1.0] - 2022-07-09"},{"location":"changelog/#added_1","text":"some classic DTDG learning models code to reproduce result in paper \"Introducing Node Memory into Discrete Time Dynamic Graph Learning\"","title":"Added"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/mcgill-cpslab/spiral/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 spirograph could always use more documentation, whether as part of the official spirograph docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/mcgill-cpslab/spiral/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up spirograph for local development. Find an issue you want to work on.. Clone spirograph locally $ git clone https://github.com/mcgill-cpslab/spiral.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create your local development branch. You can create your local development branch from the project branch with name prefix as 'project/' for local development: $ git checkout project/a_project_branch $ git checkout -b feature/name-of-your-feature for bug fix: $ git checkout -b bugfix/name-of-your-bugfix Now you can make your changes locally. If you have spent quite some time on your change and there maybe new updates to the master branch, run the following to sync up your feature branch: $ git checkout project/base_project_branch $ git pull $ git checkout your_feature_bugfix_branch $ git merge --no-ff project/base_project_branch When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-branch Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/mcgill-cpslab/spiral/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/your_working_module/your_test_cases.py To run a subset of tests. $ poetry run flake8 pyth_to_your_code To run coding style check on a particular file or folder Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/mcgill-cpslab/spiral/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"spirograph could always use more documentation, whether as part of the official spirograph docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/mcgill-cpslab/spiral/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up spirograph for local development. Find an issue you want to work on.. Clone spirograph locally $ git clone https://github.com/mcgill-cpslab/spiral.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create your local development branch. You can create your local development branch from the project branch with name prefix as 'project/' for local development: $ git checkout project/a_project_branch $ git checkout -b feature/name-of-your-feature for bug fix: $ git checkout -b bugfix/name-of-your-bugfix Now you can make your changes locally. If you have spent quite some time on your change and there maybe new updates to the master branch, run the following to sync up your feature branch: $ git checkout project/base_project_branch $ git pull $ git checkout your_feature_bugfix_branch $ git merge --no-ff project/base_project_branch When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-branch Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/mcgill-cpslab/spiral/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/your_working_module/your_test_cases.py To run a subset of tests. $ poetry run flake8 pyth_to_your_code To run coding style check on a particular file or folder","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install dynamite, run this command in your terminal: $ pip install dynamite This is the preferred method to install dynamite, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for dynamite can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/zhuyuecai/dynamite Or download the tarball : $ curl -OJL https://github.com/zhuyuecai/dynamite/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install dynamite, run this command in your terminal: $ pip install dynamite This is the preferred method to install dynamite, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for dynamite can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/zhuyuecai/dynamite Or download the tarball : $ curl -OJL https://github.com/zhuyuecai/dynamite/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use SpiroGraph in a project import spiro","title":"Usage"},{"location":"usage/#usage","text":"To use SpiroGraph in a project import spiro","title":"Usage"}]}